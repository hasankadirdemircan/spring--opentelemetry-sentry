version: '3.8'

services:
  otel-collector:
    image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4318:4318"   # OTLP HTTP receiver
      - "4317:4317"   # OTLP gRPC receiver
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - otel-collector

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin

  # Spring Boot Microservice-a
  a-microservice-app:
    build:
      context: ../microservice-a
    restart: always  
    container_name: a-microservice-app  
    depends_on:
      - otel-collector
    environment:
      server.address: 0.0.0.0
      SENTRY_API_KEY: "a733569725c03a80f9611b56b1dbe4ff"
    ports:
      - "8095:8095"

 # Spring Boot Microservice-b
  b-microservice-app:
    build:
      context: ../microservice-b
    restart: always  
    container_name: b-microservice-app  
    depends_on:
      - otel-collector
    environment:
      server.address: 0.0.0.0
      SENTRY_API_KEY: "a733569725c03a80f9611b56b1dbe4ff"
    ports:
      - "8096:8096"    

volumes:
  grafana-data: